// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"catalog-go/database/model"
)

func newCats(db *gorm.DB, opts ...gen.DOOption) cats {
	_cats := cats{}

	_cats.catsDo.UseDB(db, opts...)
	_cats.catsDo.UseModel(&model.Cats{})

	tableName := _cats.catsDo.TableName()
	_cats.ALL = field.NewAsterisk(tableName)
	_cats.UUID = field.NewString(tableName, "uuid")
	_cats.Caption = field.NewString(tableName, "caption")
	_cats.Image = field.NewString(tableName, "image")

	_cats.fillFieldMap()

	return _cats
}

type cats struct {
	catsDo catsDo

	ALL     field.Asterisk
	UUID    field.String
	Caption field.String
	Image   field.String

	fieldMap map[string]field.Expr
}

func (c cats) Table(newTableName string) *cats {
	c.catsDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cats) As(alias string) *cats {
	c.catsDo.DO = *(c.catsDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cats) updateTableName(table string) *cats {
	c.ALL = field.NewAsterisk(table)
	c.UUID = field.NewString(table, "uuid")
	c.Caption = field.NewString(table, "caption")
	c.Image = field.NewString(table, "image")

	c.fillFieldMap()

	return c
}

func (c *cats) WithContext(ctx context.Context) *catsDo { return c.catsDo.WithContext(ctx) }

func (c cats) TableName() string { return c.catsDo.TableName() }

func (c cats) Alias() string { return c.catsDo.Alias() }

func (c cats) Columns(cols ...field.Expr) gen.Columns { return c.catsDo.Columns(cols...) }

func (c *cats) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cats) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 3)
	c.fieldMap["uuid"] = c.UUID
	c.fieldMap["caption"] = c.Caption
	c.fieldMap["image"] = c.Image
}

func (c cats) clone(db *gorm.DB) cats {
	c.catsDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cats) replaceDB(db *gorm.DB) cats {
	c.catsDo.ReplaceDB(db)
	return c
}

type catsDo struct{ gen.DO }

func (c catsDo) Debug() *catsDo {
	return c.withDO(c.DO.Debug())
}

func (c catsDo) WithContext(ctx context.Context) *catsDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c catsDo) ReadDB() *catsDo {
	return c.Clauses(dbresolver.Read)
}

func (c catsDo) WriteDB() *catsDo {
	return c.Clauses(dbresolver.Write)
}

func (c catsDo) Session(config *gorm.Session) *catsDo {
	return c.withDO(c.DO.Session(config))
}

func (c catsDo) Clauses(conds ...clause.Expression) *catsDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c catsDo) Returning(value interface{}, columns ...string) *catsDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c catsDo) Not(conds ...gen.Condition) *catsDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c catsDo) Or(conds ...gen.Condition) *catsDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c catsDo) Select(conds ...field.Expr) *catsDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c catsDo) Where(conds ...gen.Condition) *catsDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c catsDo) Order(conds ...field.Expr) *catsDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c catsDo) Distinct(cols ...field.Expr) *catsDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c catsDo) Omit(cols ...field.Expr) *catsDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c catsDo) Join(table schema.Tabler, on ...field.Expr) *catsDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c catsDo) LeftJoin(table schema.Tabler, on ...field.Expr) *catsDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c catsDo) RightJoin(table schema.Tabler, on ...field.Expr) *catsDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c catsDo) Group(cols ...field.Expr) *catsDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c catsDo) Having(conds ...gen.Condition) *catsDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c catsDo) Limit(limit int) *catsDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c catsDo) Offset(offset int) *catsDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c catsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *catsDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c catsDo) Unscoped() *catsDo {
	return c.withDO(c.DO.Unscoped())
}

func (c catsDo) Create(values ...*model.Cats) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c catsDo) CreateInBatches(values []*model.Cats, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c catsDo) Save(values ...*model.Cats) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c catsDo) First() (*model.Cats, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Cats), nil
	}
}

func (c catsDo) Take() (*model.Cats, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Cats), nil
	}
}

func (c catsDo) Last() (*model.Cats, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Cats), nil
	}
}

func (c catsDo) Find() ([]*model.Cats, error) {
	result, err := c.DO.Find()
	return result.([]*model.Cats), err
}

func (c catsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Cats, err error) {
	buf := make([]*model.Cats, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c catsDo) FindInBatches(result *[]*model.Cats, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c catsDo) Attrs(attrs ...field.AssignExpr) *catsDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c catsDo) Assign(attrs ...field.AssignExpr) *catsDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c catsDo) Joins(fields ...field.RelationField) *catsDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c catsDo) Preload(fields ...field.RelationField) *catsDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c catsDo) FirstOrInit() (*model.Cats, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Cats), nil
	}
}

func (c catsDo) FirstOrCreate() (*model.Cats, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Cats), nil
	}
}

func (c catsDo) FindByPage(offset int, limit int) (result []*model.Cats, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c catsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c catsDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c catsDo) Delete(models ...*model.Cats) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *catsDo) withDO(do gen.Dao) *catsDo {
	c.DO = *do.(*gen.DO)
	return c
}
