// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"catalog-go/database/model"
)

func newReactions(db *gorm.DB, opts ...gen.DOOption) reactions {
	_reactions := reactions{}

	_reactions.reactionsDo.UseDB(db, opts...)
	_reactions.reactionsDo.UseModel(&model.Reactions{})

	tableName := _reactions.reactionsDo.TableName()
	_reactions.ALL = field.NewAsterisk(tableName)
	_reactions.ID = field.NewUint(tableName, "id")
	_reactions.CreatedAt = field.NewTime(tableName, "created_at")
	_reactions.UpdatedAt = field.NewTime(tableName, "updated_at")
	_reactions.DeletedAt = field.NewField(tableName, "deleted_at")
	_reactions.Emoji = field.NewString(tableName, "emoji")
	_reactions.Clients = field.NewField(tableName, "clients")
	_reactions.CatUUID = field.NewString(tableName, "cat_uuid")

	_reactions.fillFieldMap()

	return _reactions
}

type reactions struct {
	reactionsDo reactionsDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	Emoji     field.String
	Clients   field.Field
	CatUUID   field.String

	fieldMap map[string]field.Expr
}

func (r reactions) Table(newTableName string) *reactions {
	r.reactionsDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r reactions) As(alias string) *reactions {
	r.reactionsDo.DO = *(r.reactionsDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *reactions) updateTableName(table string) *reactions {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewUint(table, "id")
	r.CreatedAt = field.NewTime(table, "created_at")
	r.UpdatedAt = field.NewTime(table, "updated_at")
	r.DeletedAt = field.NewField(table, "deleted_at")
	r.Emoji = field.NewString(table, "emoji")
	r.Clients = field.NewField(table, "clients")
	r.CatUUID = field.NewString(table, "cat_uuid")

	r.fillFieldMap()

	return r
}

func (r *reactions) WithContext(ctx context.Context) *reactionsDo {
	return r.reactionsDo.WithContext(ctx)
}

func (r reactions) TableName() string { return r.reactionsDo.TableName() }

func (r reactions) Alias() string { return r.reactionsDo.Alias() }

func (r reactions) Columns(cols ...field.Expr) gen.Columns { return r.reactionsDo.Columns(cols...) }

func (r *reactions) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *reactions) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 7)
	r.fieldMap["id"] = r.ID
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
	r.fieldMap["deleted_at"] = r.DeletedAt
	r.fieldMap["emoji"] = r.Emoji
	r.fieldMap["clients"] = r.Clients
	r.fieldMap["cat_uuid"] = r.CatUUID
}

func (r reactions) clone(db *gorm.DB) reactions {
	r.reactionsDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r reactions) replaceDB(db *gorm.DB) reactions {
	r.reactionsDo.ReplaceDB(db)
	return r
}

type reactionsDo struct{ gen.DO }

func (r reactionsDo) Debug() *reactionsDo {
	return r.withDO(r.DO.Debug())
}

func (r reactionsDo) WithContext(ctx context.Context) *reactionsDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r reactionsDo) ReadDB() *reactionsDo {
	return r.Clauses(dbresolver.Read)
}

func (r reactionsDo) WriteDB() *reactionsDo {
	return r.Clauses(dbresolver.Write)
}

func (r reactionsDo) Session(config *gorm.Session) *reactionsDo {
	return r.withDO(r.DO.Session(config))
}

func (r reactionsDo) Clauses(conds ...clause.Expression) *reactionsDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r reactionsDo) Returning(value interface{}, columns ...string) *reactionsDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r reactionsDo) Not(conds ...gen.Condition) *reactionsDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r reactionsDo) Or(conds ...gen.Condition) *reactionsDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r reactionsDo) Select(conds ...field.Expr) *reactionsDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r reactionsDo) Where(conds ...gen.Condition) *reactionsDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r reactionsDo) Order(conds ...field.Expr) *reactionsDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r reactionsDo) Distinct(cols ...field.Expr) *reactionsDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r reactionsDo) Omit(cols ...field.Expr) *reactionsDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r reactionsDo) Join(table schema.Tabler, on ...field.Expr) *reactionsDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r reactionsDo) LeftJoin(table schema.Tabler, on ...field.Expr) *reactionsDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r reactionsDo) RightJoin(table schema.Tabler, on ...field.Expr) *reactionsDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r reactionsDo) Group(cols ...field.Expr) *reactionsDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r reactionsDo) Having(conds ...gen.Condition) *reactionsDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r reactionsDo) Limit(limit int) *reactionsDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r reactionsDo) Offset(offset int) *reactionsDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r reactionsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *reactionsDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r reactionsDo) Unscoped() *reactionsDo {
	return r.withDO(r.DO.Unscoped())
}

func (r reactionsDo) Create(values ...*model.Reactions) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r reactionsDo) CreateInBatches(values []*model.Reactions, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r reactionsDo) Save(values ...*model.Reactions) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r reactionsDo) First() (*model.Reactions, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Reactions), nil
	}
}

func (r reactionsDo) Take() (*model.Reactions, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Reactions), nil
	}
}

func (r reactionsDo) Last() (*model.Reactions, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Reactions), nil
	}
}

func (r reactionsDo) Find() ([]*model.Reactions, error) {
	result, err := r.DO.Find()
	return result.([]*model.Reactions), err
}

func (r reactionsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Reactions, err error) {
	buf := make([]*model.Reactions, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r reactionsDo) FindInBatches(result *[]*model.Reactions, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r reactionsDo) Attrs(attrs ...field.AssignExpr) *reactionsDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r reactionsDo) Assign(attrs ...field.AssignExpr) *reactionsDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r reactionsDo) Joins(fields ...field.RelationField) *reactionsDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r reactionsDo) Preload(fields ...field.RelationField) *reactionsDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r reactionsDo) FirstOrInit() (*model.Reactions, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Reactions), nil
	}
}

func (r reactionsDo) FirstOrCreate() (*model.Reactions, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Reactions), nil
	}
}

func (r reactionsDo) FindByPage(offset int, limit int) (result []*model.Reactions, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r reactionsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r reactionsDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r reactionsDo) Delete(models ...*model.Reactions) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *reactionsDo) withDO(do gen.Dao) *reactionsDo {
	r.DO = *do.(*gen.DO)
	return r
}
